{
	"info": {
		"_postman_id": "b699b84b-8ccc-4c72-9209-59d3c69d0829",
		"name": "Validating task with scripts_2_3_4",
		"description": "*   [http://162.55.220.72:5007/object_info_4](http://162.55.220.72:5007/object_info_4)  \n    Convert items 12-13-14 (salary from request and response are equal) in such a way that the check is performed in a cycle,  \n    in which there will be only ONE test. The test name should change depending on the value in Salary\n    \n\n*   [http://162.55.220.72:5005/object_info_3](http://162.55.220.72:5005/object_info_3)  \n    Convert tasks 5-7 (compare identical fields in the request and response)  \n    in such a way that it was done IN ONE TEST (all 3 fields at once) WITHOUT CYCLES! (deep object comparison)\n    \n\n*   [http://162.55.220.72:5005/user_info_2](http://162.55.220.72:5005/user_info_2)\n    \n\n1.  Convert tasks 8 - 13 (check that json has the required parameter) in this way,  \n    so that all checks are done in a cycle (1 check in a cycle, which includes the necessary parameters).  \n    The name of the test should be modified based on the submitted data. ( ${} or some other way)\n2.  ** Convert tasks 14 - 18 (check that the parameter is equal to salary multiplied by the coefficient) in such a way that  \n    so that all checks are done in a cycle (1 check in a cycle, which includes the necessary parameters).  \n    The name of the test should be modified based on the submitted data. ( ${} or some other way)\n3.  *** Convert the tasks 1 and 2 described above for this endpoint to ONE CYCLE,  \n    where BOTH tests will take place.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20910140"
	},
	"item": [
		{
			"name": "checkSalary_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respSalary = pm.response.json().salary;\r",
							"const reqSalary = +pm.request.url.query.get(\"salary\");\r",
							"\r",
							"// * Convert items 12-13-14 (salary from request and response are equal) so that the check is done in a loop,\r",
							"// which will have only ONE test. The test name should change depending on the value in Salary\r",
							"\r",
							"respSalary.forEach((response, index) => {\r",
							"    pm.test(`Request ${reqSalary} * ${index} === Response ${response}`, () => {\r",
							"        pm.expect(reqSalary*(index+1)).to.eql(+response);\r",
							"        \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "deep validation_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const reqObject = pm.request.url.query.toObject();\r",
							"const respObject = {\r",
							"    name: pm.response.json().name,\r",
							"    age: String(pm.response.json().age),\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"// Convert tasks 5-7 (compare identical fields in the request and response) \r",
							"// in such a way that it was done IN ONE TEST (all 3 fields at once) WITHOUT CYCLES! \r",
							"// (deep object comparison)\r",
							"\r",
							"pm.test(\"Compare req object and resp object\", () => {\r",
							"    pm.expect(reqObject).to.deep.eql(respObject);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "check multiplication_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Convert tasks 8 - 13 (check that json has the required parameter) in this way,\r",
							"//    so that all checks are done in a cycle (1 check in a cycle, which includes the necessary parameters).\r",
							"//    The name of the test should be modified based on the submitted data. ( ${} or some other way)\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const arrSalary = [\r",
							"                    'start_qa_salary',\r",
							"                    'qa_salary_after_6_months',\r",
							"                    'qa_salary_after_12_months',\r",
							"                    'qa_salary_after_1.5_year',\r",
							"                    'qa_salary_after_3.5_years'\r",
							"                    ]\r",
							"\r",
							"arrSalary.forEach(key => {\r",
							"    pm.test(`Response has ${key}`, () => {\r",
							"        pm.expect(jsonData).to.have.property(key);\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							"//  2)** Convert tasks 14 - 18 (check that the parameter is equal to salary multiplied by the coefficient) \r",
							"//       in such a way that\r",
							"//       so that all checks are done in a cycle (1 check in a cycle, which includes the necessary \r",
							"//       parameters).\r",
							"//       The name of the test should be modified based on the submitted data. ( ${} or some other way)\r",
							"\r",
							"const salary = pm.globals.get(\"salary\");\r",
							"const count  = { \r",
							"                'start_qa_salary': 1,\r",
							"                'qa_salary_after_6_months': 2,\r",
							"                'qa_salary_after_12_months': 2.7,\r",
							"                'qa_salary_after_1.5_year': 3.3,\r",
							"                'qa_salary_after_3.5_years': 3.8\r",
							"                }\r",
							"\r",
							"for(let i in count) {\r",
							"    pm.test(`${i} from response = salary from request * ${count[i]}`, () => {\r",
							"        pm.expect(+jsonData[i]).to.eql(salary * count[i]);\r",
							"    })\r",
							"}\r",
							"\r",
							"// 3)*** Convert the tasks 1 and 2 described above for this endpoint to ONE CYCLE,\r",
							"//       where BOTH tests will take place.\r",
							"\r",
							"count[\"person\"] = \"\";\r",
							"\r",
							"for(let i in count) {\r",
							"        pm.test(`Response has ${i}`, () => {\r",
							"        pm.expect(jsonData).to.have.property(i);\r",
							"        })\r",
							"    if(i != \"person\") {\r",
							"        pm.test(`${i} from response = salary from request * ${count[i]}`, () => {\r",
							"        pm.expect(+jsonData[i]).to.eql(salary * count[i]);\r",
							"        })\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}